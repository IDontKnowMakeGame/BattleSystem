using System;
using System.Collections.Generic;
using UnityEngine;

namespace Manager
{

    ///Do Not Edit This File
    public class GameManagement : MonoBehaviour
    {
        
        private static GameManagement _instance;
        public static GameManagement Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = FindObjectOfType<GameManagement>();
                    if (_instance == null)
                    {
                        GameObject go = new GameObject();
                        go.name = "GameManagement";
                        _instance = go.AddComponent<GameManagement>();
                    }
                }
                return _instance;
            }
        }
        
        private Dictionary<Type, IManager> _managers = new Dictionary<Type, IManager>();

        public IManager AddManager<T>() where T : IManager, new() //
        {
            var type = typeof(T);
            if (_managers.ContainsKey(type))
            {
                Debug.LogError("Manager already exists");
                return null;
            }

            var manager = new T();
            manager.instance = this;
            _managers.Add(type, manager);
            return manager;
        }

        public T GetManager<T>() where T : IManager //딕셔너리에 있으면 가져와주고
        {
            var type = typeof(T);
            if (!_managers.ContainsKey(type))
            {
                Debug.LogError("Manager does not exist");
                return default;
            }

            return (T)_managers[type];
        }

        private void Init()
        {
            AddManager<InputManager>();
            AddManager<MapManager>();
            AddManager<PoolManager>();
            AddManager<ResourceManagers>();
            AddManager<DataManager>();
            AddManager<CameraManager>();
        }
        public void Awake()
        {
            Init();
            foreach (var manager in _managers.Values)
            {
                manager.Awake();
            }
        }

        public void Start()
        {
            foreach (var manager in _managers.Values)
            {
                manager.Start();
            }
        }

        public void Update()
        {
            foreach (var manager in _managers.Values)
            {
                manager.Update();
            }
        }
    }
}